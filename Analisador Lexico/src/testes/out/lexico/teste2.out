const palavra_reservada 1:1
{ delimitador 1:7
int palavra_reservada 2:1
a id 2:5
= operador 2:7
2 numero 2:8
; delimitador 2:9
char palavra_reservada 3:1
b id 3:6
= operador 3:8
'a' caractere_constante 3:9
; delimitador 3:12
char palavra_reservada 4:1
a id 4:6
= operador 4:7
5 numero 4:8
; delimitador 4:9
} delimitador 5:1
const palavra_reservada 6:1
{ delimitador 6:6
int palavra_reservada 7:1
a id 7:5
= operador 7:6
2 numero 7:7
; delimitador 7:8
} delimitador 8:1
int palavra_reservada 10:1
b id 10:5
; delimitador 10:6
int palavra_reservada 11:1
c id 11:5
; delimitador 11:6
char palavra_reservada 12:1
d id 12:6
; delimitador 12:7
float palavra_reservada 13:1
e id 13:7
; delimitador 13:8
string palavra_reservada 14:1
a1 id 14:8
; delimitador 14:10
class palavra_reservada 15:1
abb id 15:7
> operador 15:11
a1 id 15:13
{ delimitador 15:15
} delimitador 17:1
class palavra_reservada 18:1
dad id 18:7
{ delimitador 18:10
int palavra_reservada 19:1
ddd id 19:5
; delimitador 19:8
const palavra_reservada 20:1
{ delimitador 20:7
int palavra_reservada 21:1
a id 21:5
= operador 21:7
2 numero 21:8
; delimitador 21:9
char palavra_reservada 22:1
b id 22:6
= operador 22:8
'a' caractere_constante 22:9
; delimitador 22:12
char palavra_reservada 23:1
a id 23:6
= operador 23:7
5 numero 23:8
; delimitador 23:9
} delimitador 24:1
} delimitador 26:1
class palavra_reservada 28:1
son id 28:7
> operador 28:11
dad id 28:13
{ delimitador 28:16
} delimitador 30:1
class palavra_reservada 31:1
aaa id 31:7
> operador 31:11
aaa id 31:13
{ delimitador 31:16
} delimitador 33:1
class palavra_reservada 34:1
aaaa id 34:7
> operador 34:12
aba id 34:14
{ delimitador 34:17
} delimitador 36:1
class palavra_reservada 37:1
a id 37:7
{ delimitador 37:8
} delimitador 39:1
class palavra_reservada 40:1
aaa id 40:7
{ delimitador 40:11
const palavra_reservada 41:1
{ delimitador 41:7
int palavra_reservada 42:1
a id 42:5
= operador 42:6
10.10 numero 42:7
; delimitador 42:12
} delimitador 43:1
int palavra_reservada 44:1
a id 44:5
; delimitador 44:6
int palavra_reservada 45:1
b id 45:5
; delimitador 45:6
} delimitador 47:1
void palavra_reservada 51:1
main palavra_reservada 51:6
( delimitador 51:10
) delimitador 51:11
{ delimitador 51:13
int palavra_reservada 52:1
a id 52:5
; delimitador 52:6
float palavra_reservada 53:1
a id 53:7
; delimitador 53:8
if palavra_reservada 54:1
( delimitador 54:3
a id 54:4
== operador 54:5
2 numero 54:7
+ operador 54:8
2 numero 54:9
+ operador 54:10
2 numero 54:11
* operador 54:12
2 numero 54:13
&& operador 54:14
true palavra_reservada 54:16
) delimitador 54:20
{ delimitador 54:21
a id 55:1
= operador 55:3
10 numero 55:4
; delimitador 55:6
} delimitador 56:1
else palavra_reservada 56:3
{ delimitador 56:8
a id 57:1
= operador 57:2
2 numero 57:3
; delimitador 57:4
} delimitador 58:1
} delimitador 59:1
class palavra_reservada 62:1
capim id 62:7
> operador 62:13
folha id 62:15
{ delimitador 62:21
float palavra_reservada 64:5
isGreen id 64:11
( delimitador 64:18
int palavra_reservada 64:19
a id 64:23
, delimitador 64:24
int palavra_reservada 64:26
b id 64:30
) delimitador 64:31
{ delimitador 64:33
return palavra_reservada 65:9
b id 65:16
; delimitador 65:17
} delimitador 66:5
} delimitador 68:1

nao ha erros lexicos
