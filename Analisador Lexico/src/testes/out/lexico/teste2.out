const palavra_reservada 1:1
{ delimitador 1:7
int palavra_reservada 2:1
a id 2:5
= operador 2:7
2 numero 2:8
; delimitador 2:9
char palavra_reservada 3:1
b id 3:6
= operador 3:8
'a' caractere_constante 3:9
; delimitador 3:12
} delimitador 4:1
const palavra_reservada 5:1
{ delimitador 5:6
int palavra_reservada 6:1
a id 6:5
= operador 6:6
2 numero 6:7
; delimitador 6:8
} delimitador 7:1
int palavra_reservada 9:1
b id 9:5
; delimitador 9:6
int palavra_reservada 10:1
c id 10:5
; delimitador 10:6
char palavra_reservada 11:1
d id 11:6
; delimitador 11:7
float palavra_reservada 12:1
e id 12:7
; delimitador 12:8
string palavra_reservada 13:1
a1 id 13:8
; delimitador 13:10
carro id 15:1
gol id 15:7
; delimitador 15:10
asdas id 17:1
asfaf id 18:1
123 numero 19:1
void palavra_reservada 21:1
main palavra_reservada 21:6
( delimitador 21:10
) delimitador 21:11
{ delimitador 21:13
if palavra_reservada 22:1
( delimitador 22:3
a id 22:4
== operador 22:5
2 numero 22:7
) delimitador 22:8
{ delimitador 22:9
} delimitador 24:1
else palavra_reservada 24:3
{ delimitador 24:8
a id 25:1
= operador 25:2
2 numero 25:3
; delimitador 25:4
} delimitador 26:1
} delimitador 27:1
class palavra_reservada 29:1
a id 29:7
a id 30:1
a id 30:3
; delimitador 30:5
a id 30:7
a id 30:9
; delimitador 30:10
a id 31:1
a id 31:3
a id 31:5
; delimitador 31:6
a id 32:1
; delimitador 32:2
int palavra_reservada 33:1
a id 33:5
; delimitador 33:6
int palavra_reservada 34:1
b id 34:5
; delimitador 34:6
} delimitador 36:1
class palavra_reservada 39:1
capim id 39:7
> operador 39:13
folha id 39:15
{ delimitador 39:21
float palavra_reservada 41:5
isGreen id 41:11
( delimitador 41:18
) delimitador 41:19
{ delimitador 41:21
return palavra_reservada 42:9
b id 42:16
; delimitador 42:17
} delimitador 43:5
} delimitador 45:1
; delimitador 45:2
; delimitador 45:3

nao ha erros lexicos
