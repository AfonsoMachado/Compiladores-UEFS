const palavra_reservada 1:1
{ delimitador 1:7
int palavra_reservada 2:1
a id 2:5
= operador 2:7
2 numero 2:8
; delimitador 2:9
char palavra_reservada 3:1
b id 3:6
= operador 3:8
'a' caractere_constante 3:9
; delimitador 3:12
char palavra_reservada 4:1
a id 4:6
= operador 4:7
5 numero 4:8
; delimitador 4:9
int palavra_reservada 5:1
abcd id 5:5
= operador 5:9
0 numero 5:10
; delimitador 5:11
} delimitador 6:1
const palavra_reservada 7:1
{ delimitador 7:6
int palavra_reservada 8:1
a id 8:5
= operador 8:6
2 numero 8:7
; delimitador 8:8
} delimitador 9:1
int palavra_reservada 11:1
b id 11:5
; delimitador 11:6
int palavra_reservada 12:1
c id 12:5
; delimitador 12:6
char palavra_reservada 13:1
d id 13:6
; delimitador 13:7
float palavra_reservada 14:1
e id 14:7
; delimitador 14:8
string palavra_reservada 15:1
a1 id 15:8
; delimitador 15:10
class palavra_reservada 16:1
abb id 16:7
> operador 16:11
a1 id 16:13
{ delimitador 16:15
} delimitador 18:1
class palavra_reservada 19:1
dad id 19:7
{ delimitador 19:10
float palavra_reservada 20:1
ddd id 20:7
; delimitador 20:10
int palavra_reservada 21:1
vet2 id 21:5
[ delimitador 21:9
10.0 numero 21:10
] delimitador 21:14
; delimitador 21:15
int palavra_reservada 22:1
vet id 22:5
[ delimitador 22:8
ddd id 22:9
] delimitador 22:12
; delimitador 22:13
int palavra_reservada 23:1
vetor id 23:5
[ delimitador 23:11
nao id 23:12
] delimitador 23:15
; delimitador 23:16
const palavra_reservada 24:1
{ delimitador 24:7
int palavra_reservada 25:1
a id 25:5
= operador 25:7
2 numero 25:8
; delimitador 25:9
char palavra_reservada 26:1
b id 26:6
= operador 26:8
'a' caractere_constante 26:9
; delimitador 26:12
char palavra_reservada 27:1
a id 27:6
= operador 27:7
5 numero 27:8
; delimitador 27:9
} delimitador 28:1
int palavra_reservada 29:2
abcd id 29:6
; delimitador 29:10
} delimitador 30:1
class palavra_reservada 32:1
son id 32:7
> operador 32:11
dad id 32:13
{ delimitador 32:16
} delimitador 34:1
class palavra_reservada 35:1
aaa id 35:7
> operador 35:11
aaa id 35:13
{ delimitador 35:16
} delimitador 37:1
class palavra_reservada 38:1
aaaa id 38:7
> operador 38:12
aba id 38:14
{ delimitador 38:17
} delimitador 40:1
class palavra_reservada 41:1
a id 41:7
{ delimitador 41:8
} delimitador 43:1
class palavra_reservada 44:1
aaa id 44:7
{ delimitador 44:11
const palavra_reservada 45:1
{ delimitador 45:7
int palavra_reservada 46:1
a id 46:5
= operador 46:6
10.10 numero 46:7
; delimitador 46:12
} delimitador 47:1
int palavra_reservada 48:1
a id 48:5
; delimitador 48:6
int palavra_reservada 49:1
b id 49:5
; delimitador 49:6
} delimitador 51:1
void palavra_reservada 55:1
main palavra_reservada 55:6
( delimitador 55:10
) delimitador 55:11
{ delimitador 55:13
int palavra_reservada 56:1
a id 56:5
; delimitador 56:6
float palavra_reservada 57:1
a id 57:7
; delimitador 57:8
if palavra_reservada 58:1
( delimitador 58:3
a id 58:4
== operador 58:5
2 numero 58:7
+ operador 58:8
2 numero 58:9
+ operador 58:10
2 numero 58:11
* operador 58:12
2 numero 58:13
&& operador 58:14
true palavra_reservada 58:16
) delimitador 58:20
{ delimitador 58:21
a id 59:1
= operador 59:3
10 numero 59:4
; delimitador 59:6
} delimitador 60:1
else palavra_reservada 60:3
{ delimitador 60:8
e id 63:1
= operador 63:3
10.10 numero 63:5
; delimitador 63:10
a id 64:1
= operador 64:2
2 numero 64:3
; delimitador 64:4
} delimitador 65:1
} delimitador 66:1
class palavra_reservada 68:1
folha id 68:7
{ delimitador 68:12
float palavra_reservada 69:2
isGreen id 69:8
( delimitador 69:15
int palavra_reservada 69:16
a id 69:20
, delimitador 69:21
int palavra_reservada 69:23
bbbb id 69:27
) delimitador 69:31
{ delimitador 69:33
return palavra_reservada 70:9
bbb2 id 70:16
; delimitador 70:20
} delimitador 71:5
int palavra_reservada 72:5
batata id 72:9
( delimitador 72:15
int palavra_reservada 72:16
maca id 72:20
, delimitador 72:24
int palavra_reservada 72:26
uva id 72:30
) delimitador 72:33
{ delimitador 72:34
return palavra_reservada 73:9
maca id 73:16
; delimitador 73:20
} delimitador 74:5
float palavra_reservada 75:5
isFruta id 75:11
( delimitador 75:18
int palavra_reservada 75:19
banana id 75:23
, delimitador 75:29
int palavra_reservada 75:31
beteraba id 75:35
) delimitador 75:43
{ delimitador 75:45
return palavra_reservada 76:9
banana id 76:16
; delimitador 76:22
} delimitador 77:5
} delimitador 78:1
class palavra_reservada 79:1
capim id 79:7
> operador 79:13
folha id 79:15
{ delimitador 79:21
float palavra_reservada 80:5
isGreen id 80:11
( delimitador 80:18
int palavra_reservada 80:19
a222 id 80:23
, delimitador 80:27
int palavra_reservada 80:29
b12222 id 80:33
) delimitador 80:39
{ delimitador 80:41
int palavra_reservada 81:9
abcd id 81:13
; delimitador 81:17
return palavra_reservada 82:9
b id 82:16
; delimitador 82:17
} delimitador 83:5
int palavra_reservada 85:5
batata id 85:9
( delimitador 85:15
int palavra_reservada 85:16
maca id 85:20
, delimitador 85:24
float palavra_reservada 85:26
uva id 85:32
) delimitador 85:35
{ delimitador 85:36
return palavra_reservada 86:9
maca id 86:16
; delimitador 86:20
} delimitador 87:5
int palavra_reservada 89:5
isFruta id 89:9
( delimitador 89:16
int palavra_reservada 89:17
banana id 89:21
, delimitador 89:27
int palavra_reservada 89:29
beteraba id 89:33
) delimitador 89:41
{ delimitador 89:43
int palavra_reservada 90:9
banana id 90:13
; delimitador 90:19
return palavra_reservada 91:9
banana id 91:16
; delimitador 91:22
} delimitador 92:5
} delimitador 94:1

nao ha erros lexicos
